name: Deploy S3 Hosted to AWS

on:
  pull_request:
    branches:
      - $default-branch
  push:
    branches:
      - $default-branch

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Terraform
        uses: actions/cache@v2
        with:
          path: ./terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/service.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Setup GitHub
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh/
          cat>~/.ssh/id_ed25519<<EOF
          ${SSH_KEY}
          EOF
          chmod 400 ~/.ssh/id_ed25519

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Vault
        run: |
          wget https://releases.hashicorp.com/vault/1.7.3/vault_1.7.3_linux_amd64.zip -O vault.zip \
          && sudo unzip vault.zip -d /usr/local/bin && rm vault.zip
          wget https://queima-artifacts.s3.amazonaws.com/awsqueima.zip -O /tmp/awsqueima.zip \
          && sudo unzip /tmp/awsqueima.zip -d /usr/local/bin \
          && sudo chmod +x /usr/local/bin/awsqueima
          awsqueima -l

      - name: Setup Teraform environment
        run: |
          $(awsqueima -a ${TF_WORKSPACE})
          cat>terraform/variables.auto.tfvars<<EOF
          environment = "${STAGE}"
          subdomain = "${SUBDOMAIN}"
          domain_name = "${DOMAIN}"
          region = "${AWS_DEFAULT_REGION}"
          EOF
          cat terraform/variables.auto.tfvars

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -upgrade

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -recursive

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        working-directory: ./terraform
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v4
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        working-directory: ./terraform
        run: terraform apply -auto-approve

  deploy-dev:
    name: Deploy Page
    runs-on: ubuntu-latest
    needs:
      - terraform
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2


      - name: Setup Vault
        run: |
          wget https://releases.hashicorp.com/vault/1.7.3/vault_1.7.3_linux_amd64.zip -O vault.zip \
          && sudo unzip vault.zip -d /usr/local/bin && rm vault.zip
          wget https://queima-artifacts.s3.amazonaws.com/awsqueima.zip -O /tmp/awsqueima.zip \
          && sudo unzip /tmp/awsqueima.zip -d /usr/local/bin \
          && sudo chmod +x /usr/local/bin/awsqueima
          awsqueima -l

      - name: Configure AWS Credentials
        run: |
          $(awsqueima -a ${TF_WORKSPACE})
          cat>>$GITHUB_ENV<<EOF
          AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
          AWS_REGION=${AWS_DEFAULT_REGION}
          EOF

      - name: Deploy static site to S3 bucket
        run: |
          rm -rf terraform || echo "Terraform was here, then proceed"
          S3DOMAIN=$(echo "${SUBDOMAIN}.${DOMAIN}")
          aws s3 cp ./ s3://$S3DOMAIN --recursive

          # Get all distribution and filter 
          for i in $(aws cloudfront list-distributions --query "DistributionList.Items[].Id" --output text);
          do
            DOMAIN_NAME=$(aws cloudfront get-distribution-config --id $i --query "DistributionConfig.Aliases.Items[0]" --output text);
            [ "$DOMAIN_NAME" = "${SUBDOMAIN}.${DOMAIN}" ] && ID=$i || echo "" > /dev/null;
          done;

          echo "Creating invalidation to ${ID}"

          aws cloudfront create-invalidation --distribution-id $ID --paths "/*"
